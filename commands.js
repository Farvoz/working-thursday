const {
    parseAddRecurrentMessage,
    parseAddOneMessage,
    formatPollAnswer,
    formatDate,
  } = require('./utils')
const {
  createEvent,
  getEventsForChat,
  deleteChatEvent,
  deleteAllChatEvents,
  getAllEvents,
  getChatsForUser,
  addChatForUser,
  getEventsForAllChats,
} = require('./db')

const DATA_ERROR = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
const COMMON_EXEPTION_MESSAGE = '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help';

module.exports = {
    'id': {
        description: 'id',
        callback: async (ctx) => {
            ctx.telegram.sendMessage(ctx.message.chat.id, `Your id: ${ctx.message.chat.id}`)
        }
    },
    'start': {
        'description': `
            –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ª—é–±—è—â–∏–π –ø–æ–µ—Å—Ç—å –∏ –≤—ã–ø–∏—Ç—å. –Ø –±—É–¥—É —Ç–µ–±–µ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω.
            /help - –°–ø—Ä–∞–≤–∫–∞
            /addRecurrent<event> - –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
            /addOne<time> - –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
            /stop - 
            /stop<id> - 
            /stopAll -
            /subscribe - 
            /showAvailable - –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        `,
        callback: async (ctx, command) => {
            ctx.telegram.sendMessage(ctx.message.chat.id, command.description)
        }
    },
    'addRecurrent': {
        'description': 'addRecurrent',
        callback: async (ctx) => {
            const chatId = ctx.message.chat.id

            // /addRecurrent 22:00 late night hack
            const message = ctx.message.text
          
            const {
              name,
              eventTime,
            } = parseAddRecurrentMessage(message)

            const time = new Date(eventTime + ' 1 1 1970 GMT+3')
          
            await createEvent(
              chatId,
              name,
              time,
              true,
            )
          
            ctx.reply(`–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${name} –Ω–∞ ${eventTime}`)
        }
    },
    'addOne': {
        'description': 'addOne',
        callback: async (ctx) => {
            const chatId = ctx.message.chat.id

            // /addOne 22:00 late night hack
            const message = ctx.message.text
          
            const {
              name,
              eventTime,
            } = parseAddOneMessage(message)

            const time = new Date(eventTime + ' 1 1 1970 GMT+3')
          
            await createEvent(
              chatId,
              name,
              time,
              false,
            )
          
            ctx.reply(`–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${name} –Ω–∞ ${eventTime}`)
        }
    },
    'stopList': {
        'description': 'stopList',
        callback: async () => ({})
    },
    'showEvents': {
        'description': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤',
        callback: async (ctx) => {
            getEventsForChat(ctx.message.chat.id).then((data) => {
                return data.map(({
                id,
                name,
                eventTime,
                }) => `${id} ‚Äî [${formatDate(eventTime)}]: ${name}`);
            }).then((eventList) => {
                if (eventList.length) {
                ctx.telegram.sendMessage(ctx.message.chat.id, eventList.join('\n'))
                } else {
                ctx.telegram.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è')
                }
            }).catch((err) => {
                ctx.telegram.sendMessage(ctx.message.chat.id, DATA_ERROR)
            });
        }
    },
    'stop': {
        'description': 'stop',
        callback: async (ctx) => {
            const idToStopPattern = /\/stop (\S*)/;

            try {
                const idToStop = ctx.message.text.match(idToStopPattern)[1];
                deleteChatEvent(ctx.message.chat.id, idToStop).then((data) => {
                if (data && !data.deletedCount) {
                    throw '(';
                }

                ctx.telegram.sendMessage(ctx.message.chat.id, '–£—Å–ø–µ—Ö üëç')
                }).catch((err) => {
                ctx.telegram.sendMessage(ctx.message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ü•≤');
                });
            } catch (err) {
                ctx.telegram.sendMessage(ctx.message.chat.id, COMMON_EXEPTION_MESSAGE);
            }
        }
    },
    'stopAll': {
        'description': 'stopAll',
        callback: async (ctx) => {
            try {
                deleteAllChatEvents(ctx.message.chat.id).then((data) => {
                if (data && !data.deletedCount) {
                    throw '(';
                }

                ctx.telegram.sendMessage(ctx.message.chat.id, '–£—Å–ø–µ—Ö üëç')
                }).catch((err) => {
                ctx.telegram.sendMessage(ctx.message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ü•≤');
                });
            } catch (err) {
                ctx.telegram.sendMessage(ctx.message.chat.id, COMMON_EXEPTION_MESSAGE);
            }
        }
    },
    'subscribe': {
        'description': 'subscribe',
        callback: async (ctx) => {
            const chatId = ctx.message.chat.id
            const userId = ctx.message.from.id
          
            addChatForUser(userId, chatId)
        }
    },
    'showAvailable': {
        'description': 'showAvailable',
        callback: async (ctx) => {
            const userId = ctx.message.from.id
            const chats = await getChatsForUser(userId) || [];
            const events = await getEventsForAllChats(chats)
            if (events.length === 0) {
                return ctx.reply(`–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`)
            }
            ctx.reply(`–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:
                ${events.reduce('', (acc, el) => {
                    acc += (el.name + ': ' + el.time + '\n')
                    return acc 
                })}
            `)
        }
    }
}
